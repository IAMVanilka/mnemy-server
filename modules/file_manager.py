import hashlib
import json
import tarfile
import os

from pathlib import Path
from typing import Optional

from fastapi import UploadFile
from modules.models import GameFilesData
import traceback

with open("settings.json", "r") as settings_file:
    backups_limit = json.load(settings_file)['backups_limit']

async def hash_generator(game_name: str, username: str) -> dict:
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å {'file_path': 'md5_hash'}"""

    base_dir = f"saves/{username}/{game_name}"

    if not os.path.exists(base_dir):
        os.mkdir(base_dir)

    files_data = dict()

    def scan_directory(directory):
        with os.scandir(directory) as entries:
            for entry in entries:
                if entry.is_file():
                    with open(entry.path, "rb") as file:
                        md5_hash = hashlib.file_digest(file, 'md5')
                        files_data[(entry.path.split(game_name)[1])] = md5_hash.hexdigest()
                elif entry.is_dir():
                    scan_directory(entry.path)

    scan_directory(base_dir)
    return files_data

async def check_files(username: str, files_data: GameFilesData):
    """–°–≤–µ—Ä—è–µ—Ç —Ö—ç—à–∏ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º–∏ (–∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Å—á–∏—Ç–∞—é—Ç—Å—è —ç—Ç–∞–ª–æ–Ω–æ–º)
        :param files_data: GameFilesData object
        :returns {files sync info}
    """

    # –¢–µ–∫—É—â–∏–µ —Ö—ç—à–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–ª–æ–∫–∞–ª—å–Ω—ã–µ)
    server_hashes: dict[str, str] = await hash_generator(files_data.game_name, username)
    # –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ö—ç—à–∏ ‚Äî –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    client_hashes: dict[str, str] = files_data.files_data

    # –ú–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤
    server_files: set = set(server_hashes.keys())
    client_files: set = set(client_hashes.keys())

    # üîπ –ß–µ–≥–æ –ù–ï —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–Ω–æ –µ—Å—Ç—å —É –∫–ª–∏–µ–Ω—Ç–∞) ‚Üí –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
    missing_on_server: list[str] = sorted(client_files - server_files)

    # üîπ –ß—Ç–æ –ª–∏—à–Ω–µ–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–Ω–µ—Ç —É –∫–ª–∏–µ–Ω—Ç–∞) ‚Üí –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å (–ø–æ –ø–æ–ª–∏—Ç–∏–∫–µ)
    extra_on_server: list[str] = sorted(server_files - client_files)

    # üîπ –û–±—â–∏–µ —Ñ–∞–π–ª—ã ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ö—ç—à–∏
    common_files: set[str] = server_files & client_files
    mismatched_hashes: list[str] = sorted(
        file for file in common_files
        if server_hashes[file] != client_hashes[file]  # —Å–µ—Ä–≤–µ—Ä ‚â† –∫–ª–∏–µ–Ω—Ç (–∫–ª–∏–µ–Ω—Ç ‚Äî –ø—Ä–∞–≤)
    )

    # === –û—Ç—á—ë—Ç ===
    print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ —ç—Ç–∞–ª–æ–Ω—É –∫–ª–∏–µ–Ω—Ç–∞ ===")

    if missing_on_server:
        print("üî¥ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã):")
        for file in missing_on_server:
            print(f"   - {file}")
    else:
        print("üü¢ –í—Å–µ —Ñ–∞–π–ª—ã –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")

    if extra_on_server:
        print("üü° –õ–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–Ω–µ –≤ —ç—Ç–∞–ª–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞):")
        for file in extra_on_server:
            print(f"   - {file}")
    else:
        print("üü¢ –ù–µ—Ç –ª–∏—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")

    if mismatched_hashes:
        print("üü† –•—ç—à–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç (—Å–µ—Ä–≤–µ—Ä —É—Å—Ç–∞—Ä–µ–ª, –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å):")
        for file in mismatched_hashes:
            print(f"   - {file} | –°–µ—Ä–≤–µ—Ä: {server_hashes[file]}, –ö–ª–∏–µ–Ω—Ç (—ç—Ç–∞–ª–æ–Ω): {client_hashes[file]}")
    else:
        print("üü¢ –í—Å–µ —Ö—ç—à–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —ç—Ç–∞–ª–æ–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–∞.")

    print("==================================")

    if missing_on_server is None and extra_on_server is None and mismatched_hashes is None:
        return {}

    return {
        "missing_on_server": missing_on_server,      # –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        "extra_on_server": extra_on_server,          # –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
        "mismatched_hashes": mismatched_hashes,      # –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å –∫–ª–∏–µ–Ω—Ç–∞
        "is_up_to_date": not (missing_on_server or mismatched_hashes),
        "needs_update": len(missing_on_server) + len(mismatched_hashes)
    }


async def delete_files(files_paths: list, game_name: str, username: str):
    """–ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã..."""

    for file in files_paths:
        file_full_path = f"saves/{username}/{game_name}{file}"
        if os.path.exists(file_full_path):
            os.remove(file_full_path)
            print(f"–£–¥–∞–ª—è—é —Ñ–∞–π–ª {file_full_path}")
        else:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_full_path}! –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        print("–õ–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã!")


def writer(folder_path: str, tar_path: Optional[str] = None, use_pipe: bool = False):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É –≤ .tar.gz.

    - –ï—Å–ª–∏ use_pipe=True ‚Üí —Å–æ–∑–¥–∞—ë—Ç pipe, –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞—Ä—Ö–∏–≤–∞—Ü–∏—é –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ,
      –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç read-–∫–æ–Ω–µ—Ü pipe –¥–ª—è —á—Ç–µ–Ω–∏—è (int fd).
    - –ï—Å–ª–∏ use_pipe=False ‚Üí –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –≤ —Ñ–∞–π–ª tar_path, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True/False.
    """
    def _write_tar(folder_path: str, name: Optional[str] = None, fileobj=None) -> bool:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è: –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Å–æ–∑–¥–∞—ë—Ç tar-–∞—Ä—Ö–∏–≤"""
        try:
            tar_args = {"fileobj": fileobj} if fileobj else {"name": name}
            with tarfile.open(mode="w:gz", compresslevel=6, **tar_args) as tar:
                def process_directory(dir_path):
                    with os.scandir(dir_path) as entries:
                        for entry in entries:
                            try:
                                if entry.is_file(follow_symlinks=False):
                                    relative_path = Path(entry.path).relative_to(folder_path)
                                    tar.add(entry.path, arcname=str(relative_path))
                                elif entry.is_dir(follow_symlinks=False):
                                    process_directory(entry.path)
                            except (OSError, PermissionError) as e:
                                print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω —ç–ª–µ–º–µ–Ω—Ç {entry.path}: {e}")
                                continue

                process_directory(folder_path)
            return True
        except Exception as e:
            print(f"‚ùå Tar creation error: {e}")
            traceback.print_exc()
            return False

    if use_pipe:
        import threading

        if tar_path is not None:
            raise ValueError("Cannot specify tar_path when use_pipe=True")

        read_fd, write_fd = os.pipe()


        def writer_worker():
            """–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫: –ø–∏—à–µ—Ç –∞—Ä—Ö–∏–≤ –≤ write-–∫–æ–Ω–µ—Ü pipe"""
            success = False
            try:
                with os.fdopen(write_fd, "wb") as wf:
                    success = _write_tar(folder_path, fileobj=wf)
            except Exception as e:
                print(f"‚ùå Writer worker error: {e}")
                traceback.print_exc()
            finally:
                try:
                    os.close(write_fd)
                except OSError:
                    pass
                if not success:
                    try:
                        os.close(read_fd)
                    except OSError:
                        pass

        thread = threading.Thread(target=writer_worker, daemon=True)
        thread.start()
        return read_fd

    else:
        if tar_path is None:
            raise ValueError("tar_path must be provided when use_pipe=False")
        return _write_tar(folder_path, name=tar_path)


async def create_archive_chunk_generator(base_dir: str, CHUNK_SIZE: int = 65536):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —á–∞–Ω–∫–æ–≤ .tar.gz –∞—Ä—Ö–∏–≤–∞.
    –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ, –¥–∞–Ω–Ω—ã–µ —á–∏—Ç–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ pipe.
    """
    read_fd = writer(folder_path=base_dir, use_pipe=True)
    if read_fd is None:
        raise RuntimeError("Writer failed to start")

    try:
        with os.fdopen(read_fd, "rb") as rf:
            while True:
                chunk = rf.read(CHUNK_SIZE)
                if not chunk:
                    break
                yield chunk
    except BrokenPipeError:
        print("‚ÑπÔ∏è  Pipe closed early (likely writer finished or encountered error)")
    except Exception as e:
        print(f"‚ùå Chunk reader error: {e}")
        raise
    finally:
        try:
            os.close(read_fd)
        except OSError:
            pass


async def get_files(file: UploadFile, game_name: str, temp_path: str, username: str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞—Ä—Ö–∏–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –∞—Ä—Ö–∏–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–≥—Ä—ã, —É–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤
    """

    import aiofiles

    if not os.path.exists(f'tmp_data/{username}'):
        os.makedirs(f'tmp_data/{username}')

    async with aiofiles.open(temp_path, "wb") as f:
        while chunk := await file.read(65536):
            await f.write(chunk)

    with tarfile.open(temp_path, "r:gz") as tar:
        if not os.path.exists(f"saves/{username}/{game_name}"):
            os.mkdir(f"saves/{username}/{game_name}")

        tar.extractall(path=f"saves/{username}/{game_name}")

    os.remove(temp_path)


async def unpack_tar_archive(file_path: str, destination_folder: str):
    with tarfile.open(file_path, "r:gz") as tar:
        if not os.path.exists(destination_folder):
            os.mkdir(destination_folder)

        tar.extractall(path=destination_folder)

        return True


async def create_backup(game_name: str, username: str):
    """
    –°–æ–∑–¥–∞–µ—Ç backup —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –≤–∏–¥–µ tar –∞—Ä—Ö–∏–≤–∞.
    """

    from datetime import datetime, UTC
    import os

    time_now_utc = datetime.now(UTC).strftime("%Y-%d-%m_%H:%M:%S")

    if not os.path.exists(f"backups/{username}/{game_name}"):
        os.makedirs(f"backups/{username}/{game_name}")
    else:
        backup_files = [f for f in os.listdir(f"backups/{username}/{game_name}") if f.endswith('.tar.gz')]
        i = len(backup_files)

        if i >= backups_limit:
            backup_files.sort()

            excess_count = i - backups_limit + 1
            for j in range(min(excess_count, len(backup_files))):
                try:
                    os.remove(f"backups/{username}/{game_name}/{backup_files[j]}")
                    print(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {backup_files[j]}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—ç–∫–∞–ø–∞ {backup_files[j]}: {e}")

    writer_status = writer(folder_path=f"saves/{username}/{game_name}", tar_path=f"backups/{username}/{game_name}/{time_now_utc}.tar.gz")

    return writer_status

async def read_saves_directory(username: str):
    list_of_games = list()
    entries = os.scandir(f'saves/{username}')
    for entry in entries:
        list_of_games.append(entry.name)

    return list_of_games

def create_all_folders():
    if not os.path.exists('backups'):
        os.mkdir('backups')
    if not os.path.exists('saves'):
        os.mkdir('saves')
    if not os.path.exists('resources'):
        os.mkdir('resources')

def get_backups_info(username):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—ç–∫–∞–ø–∞—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –§–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:
    {
        "test": [
            {
                "filename": "2025-29-09_09:01:11.tar.gz",
                "size_bytes": 123456
            },
            ...
        ],
        ...
    }
    """
    base_path = f"backups/{username}"
    backups_info = {}

    if not os.path.exists(base_path):
        return backups_info

    try:
        with os.scandir(base_path) as entries:
            for entry in entries:
                if entry.is_dir():
                    game_name = entry.name
                    game_backups = []
                    game_path = entry.path

                    with os.scandir(game_path) as files:
                        for file_entry in files:
                            if file_entry.is_file() and file_entry.name.endswith(".tar.gz"):
                                filename = file_entry.name

                                file_stat = file_entry.stat()
                                game_backups.append({
                                    "filename": filename,
                                    "size_bytes": file_stat.st_size,
                                })

                    backups_info[game_name] = game_backups

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –±—ç–∫–∞–ø–æ–≤ –¥–ª—è {username}: {e}")
        return False

    return backups_info
